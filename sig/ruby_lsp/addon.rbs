# Generated from lib/ruby_lsp/addon.rb with RBS::Inline

module RubyLsp
  # To register an add-on, inherit from this class and implement both `name` and `activate`
  #
  # # Example
  #
  # ```ruby
  # module MyGem
  #   class MyAddon < Addon
  #     def activate
  #       # Perform any relevant initialization
  #     end
  #
  #     def name
  #       "My add-on name"
  #     end
  #   end
  # end
  # ```
  class Addon
    AddonNotFoundError: untyped

    class IncompatibleApiError < StandardError
    end

    # : Array[Addon]
    attr_accessor addons: untyped

    # : Array[Addon]
    attr_accessor file_watcher_addons: untyped

    # : Array[singleton(Addon)]
    attr_reader addon_classes: untyped

    # Automatically track and instantiate add-on classes
    # : (singleton(Addon) child_class) -> void
    def self.inherited: (singleton(Addon) child_class) -> void

    # Discovers and loads all add-ons. Returns a list of errors when trying to require add-ons
    # : (GlobalState global_state, Thread::Queue outgoing_queue, ?include_project_addons: bool) -> Array[StandardError]
    def self.load_addons: (untyped global_state, Thread::Queue outgoing_queue, ?include_project_addons: bool) -> Array[StandardError]

    # Unloads all add-ons. Only intended to be invoked once when shutting down the Ruby LSP server
    # : -> void
    def self.unload_addons: () -> void

    # Get a reference to another add-on object by name and version. If an add-on exports an API that can be used by
    # other add-ons, this is the way to get access to that API.
    #
    # Important: if the add-on is not found, AddonNotFoundError will be raised. If the add-on is found, but its
    # current version does not satisfy the given version constraint, then IncompatibleApiError will be raised. It is
    # the responsibility of the add-ons using this API to handle these errors appropriately.
    # : (String addon_name, *String version_constraints) -> Addon
    def self.get: (String addon_name, *String version_constraints) -> Addon

    # Depend on a specific version of the Ruby LSP. This method should only be used if the add-on is distributed in a
    # gem that does not have a runtime dependency on the ruby-lsp gem. This method should be invoked at the top of the
    # `addon.rb` file before defining any classes or requiring any files. For example:
    #
    # ```ruby
    # RubyLsp::Addon.depend_on_ruby_lsp!(">= 0.18.0")
    #
    # module MyGem
    #   class MyAddon < RubyLsp::Addon
    #     # ...
    #   end
    # end
    # ```
    # : (*String version_constraints) -> void
    def self.depend_on_ruby_lsp!: (*String version_constraints) -> void

    # : -> void
    def initialize: () -> void

    # : (StandardError error) -> self
    def add_error: (StandardError error) -> self

    # : -> bool
    def error?: () -> bool

    # : -> String
    def formatted_errors: () -> String

    # : -> String
    def errors_details: () -> String

    def activate: (untyped global_state, untyped outgoing_queue) -> untyped

    def deactivate: () -> untyped

    def name: () -> untyped

    def version: () -> untyped

    # Handle a response from a window/showMessageRequest request. Add-ons must include the addon_name as part of the
    # original request so that the response is delegated to the correct add-on and must override this method to handle
    # the response
    # https://microsoft.github.io/language-server-protocol/specification#window_showMessageRequest
    # @overridable
    # : (String title) -> void
    def handle_window_show_message_response: (String title) -> void

    # Creates a new CodeLens listener. This method is invoked on every CodeLens request
    # @overridable
    # : (ResponseBuilders::CollectionResponseBuilder[Interface::CodeLens] response_builder, URI::Generic uri, Prism::Dispatcher dispatcher) -> void
    def create_code_lens_listener: (untyped response_builder, untyped uri, Prism::Dispatcher dispatcher) -> void

    # Creates a new Hover listener. This method is invoked on every Hover request
    # @overridable
    # : (ResponseBuilders::Hover response_builder, NodeContext node_context, Prism::Dispatcher dispatcher) -> void
    def create_hover_listener: (untyped response_builder, NodeContext node_context, Prism::Dispatcher dispatcher) -> void

    # Creates a new DocumentSymbol listener. This method is invoked on every DocumentSymbol request
    # @overridable
    # : (ResponseBuilders::DocumentSymbol response_builder, Prism::Dispatcher dispatcher) -> void
    def create_document_symbol_listener: (untyped response_builder, Prism::Dispatcher dispatcher) -> void

    # @overridable
    # : (ResponseBuilders::SemanticHighlighting response_builder, Prism::Dispatcher dispatcher) -> void
    def create_semantic_highlighting_listener: (untyped response_builder, Prism::Dispatcher dispatcher) -> void

    # Creates a new Definition listener. This method is invoked on every Definition request
    # @overridable
    # : (ResponseBuilders::CollectionResponseBuilder[(Interface::Location | Interface::LocationLink)] response_builder, URI::Generic uri, NodeContext node_context, Prism::Dispatcher dispatcher) -> void
    def create_definition_listener: (untyped response_builder, untyped uri, NodeContext node_context, Prism::Dispatcher dispatcher) -> void

    # Creates a new Completion listener. This method is invoked on every Completion request
    # @overridable
    # : (ResponseBuilders::CollectionResponseBuilder[Interface::CompletionItem] response_builder, NodeContext node_context, Prism::Dispatcher dispatcher, URI::Generic uri) -> void
    def create_completion_listener: (untyped response_builder, NodeContext node_context, Prism::Dispatcher dispatcher, untyped uri) -> void

    # Creates a new Discover Tests listener. This method is invoked on every DiscoverTests request
    # @overridable
    # : (ResponseBuilders::TestCollection response_builder, Prism::Dispatcher dispatcher, URI::Generic uri) -> void
    def create_discover_tests_listener: (untyped response_builder, Prism::Dispatcher dispatcher, untyped uri) -> void

    # Resolves the minimal set of commands required to execute the requested tests. Add-ons are responsible for only
    # handling items related to the framework they add support for and have discovered themselves
    # @overridable
    # : (Array[Hash[Symbol, untyped]]) -> Array[String]
    def resolve_test_commands: (Array[Hash[Symbol, untyped]]) -> Array[String]
  end
end
